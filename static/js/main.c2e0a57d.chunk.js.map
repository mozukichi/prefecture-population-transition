{"version":3,"sources":["Prefecture.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PrefectureSelector","props","prefectures","useState","map","pref","prefCode","state","setState","handleChange","e","target","elem","type","isCheckbox","nextState","value","checked","checks","Object","entries","filter","Number","onChange","checkboxes","Fragment","prefName","name","App","setPrefectures","useEffect","className","prefs","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAiBaA,EAAsC,SAACC,GAAW,IAAD,IAC5D,GAA0B,OAAtBA,EAAMC,YACR,OAAO,wDAFmD,MAKlCC,mBAAQ,UAChCF,EAAMC,mBAD0B,aAChC,EAAmBE,KAAI,SAACC,GAAD,sBACpBA,EAAKC,UAAW,OAPuC,mBAKrDC,EALqD,KAK9CC,EAL8C,KActDC,EAAe,SAACC,GAAsC,IAAD,EACzD,GAAiB,OAAbA,EAAEC,QAJW,SAACC,GAAD,MACmB,aAAnCA,EAA0BC,KAGDC,CAAWJ,EAAEC,QAAvC,CAEA,IAAMC,EAAOF,EAAEC,OAETI,EAAS,2BACVR,GADU,kBAEZK,EAAKI,MAAQJ,EAAKK,UAErBT,EAASO,GAGT,IAAMG,EAASC,OAAOC,QAAQL,GAC3BM,QAAO,0CACPjB,KAAI,gBAAEE,EAAF,2BAAgBgB,OAAOhB,MAC9B,UAAAL,EAAMsB,gBAAN,cAAAtB,EAAiBiB,KAGbM,EAAU,UAAGvB,EAAMC,mBAAT,aAAG,EAAmBE,KAAI,SAACC,GAAD,OACxC,cAAC,IAAMoB,SAAP,UACE,kCACGpB,EAAKqB,SACN,uBACEb,KAAK,WACLU,SAAUd,EACVO,MAAOX,EAAKC,SACZqB,KAAMtB,EAAKqB,eAPIrB,EAAKC,aAY5B,OAAO,8BAAMkB,KC9BAI,G,MA5BO,WAAO,IAAD,EACYzB,mBAAuB,IADnC,mBACnBD,EADmB,KACN2B,EADM,KAG1BC,qBAAU,WACRD,EAAe,CACb,CAAEvB,SAAU,EAAGoB,SAAU,sBACzB,CAAEpB,SAAU,EAAGoB,SAAU,0BAE1B,IAMH,OACE,sBAAKK,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,kHAGF,cAAC,EAAD,CACE7B,YAAaA,EACbqB,SAZ0B,SAACS,GAC/BC,QAAQC,IAAIF,WCCDG,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACnC,6BAAqBC,MACxB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACjCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJhBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2e0a57d.chunk.js","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\n\nexport type Prefecture = {\n  prefCode: number;\n  prefName: string;\n};\n\ntype PrefectureState = (checks: number[]) => void;\n\ntype Props = {\n  prefectures: Prefecture[];\n  onChange?: PrefectureState;\n};\n\n/**\n * 都道府県チェックボックスリスト\n */\nexport const PrefectureSelector: React.FC<Props> = (props) => {\n  if (props.prefectures === null) {\n    return <p>Prefectures is nothing.</p>;\n  }\n\n  const [state, setState] = useState(\n    props.prefectures?.map((pref) => ({\n      [pref.prefCode]: false,\n    }))\n  );\n\n  const isCheckbox = (elem: EventTarget) =>\n    (elem as HTMLInputElement).type === \"checkbox\";\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target !== null && !isCheckbox(e.target)) return;\n\n    const elem = e.target as HTMLInputElement;\n\n    const nextState = {\n      ...state,\n      [elem.value]: elem.checked,\n    };\n    setState(nextState);\n\n    // 都道府県ごとのチェック情報を「チェックした都道府県コードの配列」に変換\n    const checks = Object.entries(nextState)\n      .filter(([, checked]) => checked)\n      .map(([prefCode]) => Number(prefCode));\n    props.onChange?.(checks);\n  };\n\n  const checkboxes = props.prefectures?.map((pref) => (\n    <React.Fragment key={pref.prefCode}>\n      <label>\n        {pref.prefName}\n        <input\n          type=\"checkbox\"\n          onChange={handleChange}\n          value={pref.prefCode}\n          name={pref.prefName}\n        />\n      </label>\n    </React.Fragment>\n  ));\n  return <div>{checkboxes}</div>;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Prefecture, PrefectureSelector } from \"./Prefecture\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [prefectures, setPrefectures] = useState<Prefecture[]>([]);\n\n  useEffect(() => {\n    setPrefectures([\n      { prefCode: 1, prefName: \"北海道\" },\n      { prefCode: 2, prefName: \"青森県\" },\n    ]);\n  }, []);\n\n  const handleChangePrefectures = (prefs: number[]) => {\n    console.log(prefs);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>都道府県別総人口推移グラフ</h1>\n      </header>\n\n      <PrefectureSelector\n        prefectures={prefectures}\n        onChange={handleChangePrefectures}\n      ></PrefectureSelector>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import(\"web-vitals\").then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}