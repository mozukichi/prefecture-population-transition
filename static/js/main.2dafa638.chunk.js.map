{"version":3,"sources":["resas.ts","Prefecture.tsx","LineGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RESAS_API_KEY","fetchResasPrefectures","a","fetch","method","headers","response","json","fetchResasPopulation","prefCode","params","toString","cityCode","queryStr","URLSearchParams","url","PrefectureSelector","props","prefectures","useState","map","pref","state","setState","handleChange","e","target","elem","type","isCheckbox","nextState","value","checked","checks","Object","entries","filter","Number","onChange","checkboxes","className","name","prefName","LineGraph","seriesList","data","reduce","p","v","Set","keys","key","style","aspect","strokeDasharray","dataKey","series","index","stroke","lineColor","base","l","Math","floor","resasPopulationToGraphData","prefNames","responses","totalData","result","datum","label","flatMap","record","year","年","forEach","find","undefined","App","setPrefectures","selectedPrefs","setSelectedPrefs","graphData","setGraphData","useEffect","resasPrefs","length","Promise","all","prefs","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dafa638.chunk.js","sourcesContent":["import { Prefecture } from \"./Prefecture\";\n\nconst RESAS_API_KEY = \"1WAgEHBX1RahNCuFeYHOn8xVh9mnsQHaqjE2wcXs\";\n\nexport interface ResasPrefecturesResponse {\n  message: string | null;\n  result: Prefecture[];\n}\n\nexport interface ResasPopulationData {\n  label: string;\n  data: { year: number; value: number }[];\n}\n\nexport interface ResasPopulationResponse {\n  message: string | null;\n  result: {\n    boundaryYear: number;\n    data: ResasPopulationData[];\n  };\n}\n\n/**\n * RESAS-API から都道府県一覧のデータを取得\n */\nexport const fetchResasPrefectures = async (): Promise<ResasPrefecturesResponse> => {\n  const url = \"https://opendata.resas-portal.go.jp/api/v1/prefectures\";\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-API-KEY\": RESAS_API_KEY,\n    },\n  });\n  return (await response.json()) as ResasPrefecturesResponse;\n};\n\n/**\n * 都道府県ごとの人口構成（推移）のデータを取得\n * @param prefCode 都道府県コード\n */\nexport const fetchResasPopulation = async (\n  prefCode: number\n): Promise<ResasPopulationResponse> => {\n  const params = { prefCode: prefCode.toString(), cityCode: \"-\" };\n  const queryStr = new URLSearchParams(params);\n  const url = `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?${queryStr.toString()}`;\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-API-KEY\": RESAS_API_KEY,\n    },\n  });\n  return (await response.json()) as ResasPopulationResponse;\n};\n","import React, { useState, ChangeEvent } from \"react\";\nimport \"./Prefecture.css\";\n\nexport interface Prefecture {\n  prefCode: number;\n  prefName: string;\n}\n\ntype PrefectureState = (checks: number[]) => void;\n\ninterface Props {\n  // 表示する都道府県一覧\n  prefectures: Prefecture[];\n\n  // 選択中の都道府県を変更したときのイベント\n  onChange?: PrefectureState;\n}\n\n/**\n * 都道府県チェックボックスリスト\n */\nexport const PrefectureSelector: React.FC<Props> = (props) => {\n  if (props.prefectures === null) {\n    return <p>Prefectures is nothing.</p>;\n  }\n\n  // 都道府県のチェック状態\n  const [state, setState] = useState(\n    props.prefectures?.map((pref) => ({\n      [pref.prefCode]: false,\n    }))\n  );\n\n  const isCheckbox = (elem: EventTarget) =>\n    (elem as HTMLInputElement).type === \"checkbox\";\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target !== null && !isCheckbox(e.target)) return;\n\n    const elem = e.target as HTMLInputElement;\n\n    const nextState = {\n      ...state,\n      [elem.value]: elem.checked,\n    };\n    setState(nextState);\n\n    // 都道府県ごとのチェック情報を「チェックした都道府県コードの配列」に変換\n    const checks = Object.entries(nextState)\n      .filter(([, checked]) => checked)\n      .map(([prefCode]) => Number(prefCode));\n\n    // 選択中の都道府県の変更イベント\n    props.onChange?.(checks);\n  };\n\n  const checkboxes = props.prefectures?.map((pref) => (\n    <label className=\"Prefecture-checkbox\" key={pref.prefCode}>\n      <input\n        type=\"checkbox\"\n        onChange={handleChange}\n        value={pref.prefCode}\n        name={pref.prefName}\n      />\n      <span>{pref.prefName}</span>\n    </label>\n  ));\n\n  return (\n    <div className=\"Prefecture-container\">\n      <div className=\"Prefecture-checkbox-container\">{checkboxes}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport CSS from \"csstype\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Line,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\ninterface Props {\n  data: Record<string, number>[];\n  style?: CSS.Properties;\n}\n\nexport const LineGraph: React.FC<Props> = (props) => {\n  // 系列の洗い出し\n  const seriesList = props.data.reduce(\n    (p: string[], v) =>\n      [\n        ...new Set([...p, ...Object.keys(v).filter((key) => key !== \"年\")]),\n      ] as string[],\n    []\n  );\n\n  return (\n    <div className=\"LineChart\" style={props.style}>\n      <ResponsiveContainer aspect={4 / 3}>\n        <LineChart data={props.data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"年\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {seriesList.map((series, index) => (\n            <Line\n              key={`series-${series}`}\n              type=\"monotone\"\n              dataKey={series}\n              stroke={lineColor(index)}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\n/**\n * グラフの折れ線の色を取得\n * @param index 色番号\n * @return 色を表す文字列\n */\nconst lineColor = (index: number) => {\n  const base = index % 7;\n  const level = Math.floor(index / 7) / 7;\n  const h = 360 * (base % 7) / 7;\n  const l = 60 * level + 30;\n  return `hsl(${h},100%,${l}%)`;\n}","import React, { useState, useEffect } from \"react\";\nimport {\n  fetchResasPrefectures,\n  fetchResasPopulation,\n  ResasPopulationData,\n  ResasPopulationResponse,\n} from \"./resas\";\nimport { Prefecture, PrefectureSelector } from \"./Prefecture\";\nimport { LineGraph } from \"./LineGraph\";\nimport \"./App.css\";\n\n/**\n * アプリ本体のコンポーネント\n */\nconst App: React.FC = () => {\n  const [prefectures, setPrefectures] = useState<Prefecture[]>([]);\n  const [selectedPrefs, setSelectedPrefs] = useState<number[]>([]);\n  const [graphData, setGraphData] = useState<Record<string, number>[] | null>(\n    null\n  );\n\n  // マウント時\n  useEffect(() => {\n    void (async () => {\n      // RESAS-API から都道府県一覧のデータを取得\n      const resasPrefs = await fetchResasPrefectures();\n      setPrefectures(resasPrefs?.result);\n    })();\n  }, []);\n\n  // 選択中の都道府県が変更されたとき\n  useEffect(() => {\n    void (async () => {\n      if (selectedPrefs.length === 0) {\n        setGraphData(null);\n        return;\n      }\n\n      // 選択されている全ての都道府県について RESAS-API から人口構成（推移）のデータを取得\n      // レスポンス仕様: https://opendata.resas-portal.go.jp/docs/api/v1/population/composition/perYear.html\n      const responses = await Promise.all(\n        selectedPrefs.map((pref) => fetchResasPopulation(pref))\n      );\n\n      // 選択中の都道府県名のリスト\n      const prefNames = selectedPrefs.map((prefCode) => {\n        const prefName = prefectures.find((pref) => pref.prefCode === prefCode)\n          ?.prefName;\n        return prefName ?? \"\";\n      });\n\n      // RESAS-API の人口構成のデータをグラフデータに変換\n      const graphData = resasPopulationToGraphData(prefNames, responses);\n\n      setGraphData(graphData);\n    })();\n  }, [selectedPrefs]);\n\n  // 都道府県のチェックボックス変更\n  const handleChangePrefectures = (prefs: number[]) => {\n    setSelectedPrefs(prefs);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>都道府県別総人口推移グラフ</h1>\n      </header>\n\n      <PrefectureSelector\n        prefectures={prefectures}\n        onChange={handleChangePrefectures}\n      />\n\n      <div className=\"App-graph-container\">\n        {graphData !== null ? (\n          <LineGraph\n            style={{ width: \"80%\", height: \"100%\" }}\n            data={graphData}\n          />\n        ) : null}\n      </div>\n\n      <footer className=\"App-footer\">\n        <p>Prefecture Population Transition</p>\n      </footer>\n    </div>\n  );\n};\n\n/**\n * RESAS-API の人口構成のデータをグラフデータに変換\n * @param prefNames 都道府県名のリスト\n * @param responses 都道府県ごとの RESAS-API のレスポンスのリスト\n */\nconst resasPopulationToGraphData = (\n  prefNames: string[],\n  responses: ResasPopulationResponse[]\n) => {\n  // 各都道府県の総人口のデータを抽出\n  const totalData: Record<string, number>[][] = responses\n    .map((response) => response.result.data)\n    .map(\n      (datum) =>\n        datum.filter(\n          (datum: ResasPopulationData) => datum.label === \"総人口\"\n        )[0].data\n    );\n\n  // 「年」のリスト\n  const years = [\n    ...new Set(totalData.flatMap((data) => data.map((record) => record.year))),\n  ];\n\n  // 総人口データの配列をグラフ用のデータに変換\n  const graphData = years.map((year: number) => {\n    const record: Record<string, number> = { 年: year };\n    totalData.forEach((data, index) => {\n      const value = data.find((datum) => datum.year === year)?.value;\n      if (value !== undefined) {\n        record[prefNames[index]] = value;\n      }\n    });\n    return record;\n  });\n\n  return graphData;\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import(\"web-vitals\").then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}