{"version":3,"sources":["resas.ts","Prefecture.tsx","LineGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RESAS_API_KEY","fetchResasPrefectures","a","fetch","method","headers","response","json","fetchResasPopulation","prefCode","params","toString","cityCode","queryStr","URLSearchParams","url","PrefectureSelector","props","prefectures","length","useState","map","pref","reduce","p","v","state","setState","handleChange","e","elem","target","nextState","value","checked","checks","Object","entries","filter","Number","onChange","checkboxes","className","type","name","prefName","LineGraph","seriesList","graphData","Set","keys","key","style","data-testid","aspect","data","strokeDasharray","dataKey","series","index","stroke","lineColor","base","l","Math","floor","resasPopulationToGraphData","prefNames","responses","totalData","result","datum","label","flatMap","record","year","年","forEach","find","undefined","App","setPrefectures","selectedPrefs","setSelectedPrefs","setGraphData","mounted","useRef","useEffect","resasPrefs","current","Promise","all","checkedPrefNames","prefs","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf72074c.chunk.js","sourcesContent":["import { Prefecture } from \"./Prefecture\";\n\nconst RESAS_API_KEY = \"1WAgEHBX1RahNCuFeYHOn8xVh9mnsQHaqjE2wcXs\";\n\nexport interface ResasPrefecturesResponse {\n  message: string | null;\n  result: Prefecture[];\n}\n\nexport interface ResasPopulationData {\n  label: string;\n  data: { year: number; value: number }[];\n}\n\nexport interface ResasPopulationResponse {\n  message: string | null;\n  result: {\n    boundaryYear: number;\n    data: ResasPopulationData[];\n  };\n}\n\n/**\n * RESAS-API から都道府県一覧のデータを取得\n */\nexport const fetchResasPrefectures = async (): Promise<ResasPrefecturesResponse> => {\n  const url = \"https://opendata.resas-portal.go.jp/api/v1/prefectures\";\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-API-KEY\": RESAS_API_KEY,\n    },\n  });\n  return (await response.json()) as ResasPrefecturesResponse;\n};\n\n/**\n * 都道府県ごとの人口構成（推移）のデータを取得\n * @param prefCode 都道府県コード\n */\nexport const fetchResasPopulation = async (\n  prefCode: number\n): Promise<ResasPopulationResponse> => {\n  const params = { prefCode: prefCode.toString(), cityCode: \"-\" };\n  const queryStr = new URLSearchParams(params);\n  const url = `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?${queryStr.toString()}`;\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-API-KEY\": RESAS_API_KEY,\n    },\n  });\n  return (await response.json()) as ResasPopulationResponse;\n};\n","import React, { useState, ChangeEvent } from \"react\";\nimport \"./Prefecture.css\";\n\nexport interface Prefecture {\n  prefCode: number;\n  prefName: string;\n}\n\ntype PrefectureState = (checks: number[]) => void;\n\ninterface Props {\n  // 表示する都道府県一覧\n  prefectures: Prefecture[];\n\n  // 選択中の都道府県を変更したときのイベント\n  onChange?: PrefectureState;\n}\n\n/**\n * 都道府県チェックボックスリスト\n */\nexport const PrefectureSelector: React.FC<Props> = (props) => {\n  if (props.prefectures.length === 0) {\n    return <p>Prefectures is nothing.</p>;\n  }\n\n  // 都道府県のチェック状態\n  const [state, setState] = useState(\n    props.prefectures\n      ?.map((pref) => ({\n        [pref.prefCode]: false,\n      }))\n      .reduce((p, v) => ({ ...p, ...v }), {})\n  );\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const elem = e.target as HTMLInputElement;\n\n    const nextState = {\n      ...state,\n      [elem.value]: elem.checked,\n    };\n    setState(nextState);\n\n    // 都道府県ごとのチェック情報を「チェックした都道府県コードの配列」に変換\n    const checks = Object.entries(nextState)\n      .filter(([, checked]) => checked)\n      .map(([prefCode]) => Number(prefCode));\n\n    // 選択中の都道府県の変更イベント\n    props.onChange?.(checks);\n  };\n\n  const checkboxes = props.prefectures?.map((pref) => (\n    <label className=\"Prefecture-checkbox\" key={pref.prefCode}>\n      <input\n        type=\"checkbox\"\n        onChange={handleChange}\n        value={pref.prefCode}\n        name={pref.prefName}\n      />\n      <span>{pref.prefName}</span>\n    </label>\n  ));\n\n  return (\n    <div className=\"Prefecture-container\">\n      <div className=\"Prefecture-checkbox-container\">{checkboxes}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport CSS from \"csstype\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Line,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\ninterface Props {\n  graphData: Record<string, string | number>[];\n  style?: CSS.Properties;\n}\n\nexport const LineGraph: React.FC<Props> = (props) => {\n  // 系列の洗い出し\n  const seriesList = props.graphData.reduce(\n    (p: string[], v) =>\n      [\n        ...new Set([...p, ...Object.keys(v).filter((key) => key !== \"年\")]),\n      ] as string[],\n    []\n  );\n\n  return (\n    <div className=\"LineChart\" style={props.style} data-testid=\"linegraph\">\n      <ResponsiveContainer aspect={4 / 3}>\n        <LineChart data={props.graphData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"年\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {seriesList.map((series, index) => (\n            <Line\n              key={`series-${series}`}\n              type=\"monotone\"\n              dataKey={series}\n              stroke={lineColor(index)}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\n/**\n * グラフの折れ線の色を取得\n * @param index 色番号\n * @return 色を表す文字列\n */\nconst lineColor = (index: number) => {\n  const base = index % 7;\n  const level = Math.floor(index / 7) / 7;\n  const h = (360 * (base % 7)) / 7;\n  const l = 60 * level + 30;\n  return `hsl(${h},100%,${l}%)`;\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  fetchResasPrefectures,\n  fetchResasPopulation,\n  ResasPopulationData,\n  ResasPopulationResponse,\n} from \"./resas\";\nimport { Prefecture, PrefectureSelector } from \"./Prefecture\";\nimport { LineGraph } from \"./LineGraph\";\nimport \"./App.css\";\n\n/**\n * アプリ本体のコンポーネント\n */\nconst App: React.FC = () => {\n  const [prefectures, setPrefectures] = useState<Prefecture[]>([]);\n  const [selectedPrefs, setSelectedPrefs] = useState<number[]>([]);\n  const [graphData, setGraphData] = useState<\n    Record<string, number | string>[] | null\n  >(null);\n\n  const mounted = useRef(true);\n\n  // マウント時\n  useEffect(() => {\n    void (async () => {\n      // RESAS-API から都道府県一覧のデータを取得\n      const resasPrefs = await fetchResasPrefectures();\n\n      if (!(mounted.current && \"result\" in resasPrefs)) {\n        return;\n      }\n\n      setPrefectures(resasPrefs?.result);\n    })();\n\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // 選択中の都道府県が変更されたとき\n  useEffect(() => {\n    void (async () => {\n      if (selectedPrefs.length === 0) {\n        setGraphData(null);\n        return;\n      }\n\n      // 選択されている全ての都道府県について RESAS-API から人口構成（推移）のデータを取得\n      // レスポンス仕様: https://opendata.resas-portal.go.jp/docs/api/v1/population/composition/perYear.html\n      const responses = await Promise.all(\n        selectedPrefs.map((pref) => fetchResasPopulation(pref))\n      );\n\n      // 選択中の都道府県名のリスト\n      const prefNames = prefectures.reduce<Record<string, string>>((p, v) => {\n        p[v.prefCode] = v.prefName;\n        return p;\n      }, {});\n      const checkedPrefNames = selectedPrefs.map(\n        (prefCode) => prefNames[prefCode]\n      );\n\n      // RESAS-API の人口構成のデータをグラフデータに変換\n      const graphData = resasPopulationToGraphData(checkedPrefNames, responses);\n\n      setGraphData(graphData);\n    })();\n  }, [selectedPrefs]);\n\n  // 都道府県のチェックボックス変更\n  const handleChangePrefectures = (prefs: number[]) => {\n    setSelectedPrefs(prefs);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>都道府県別総人口推移グラフ</h1>\n      </header>\n\n      <PrefectureSelector\n        prefectures={prefectures}\n        onChange={handleChangePrefectures}\n      />\n\n      <div className=\"App-graph-container\">\n        {graphData !== null ? (\n          <LineGraph\n            style={{ width: \"80%\", height: \"100%\" }}\n            graphData={graphData}\n          />\n        ) : null}\n      </div>\n\n      <footer className=\"App-footer\">\n        <p>Prefecture Population Transition</p>\n      </footer>\n    </div>\n  );\n};\n\n/**\n * RESAS-API の人口構成のデータをグラフデータに変換\n * @param prefNames 都道府県名のリスト\n * @param responses 都道府県ごとの RESAS-API のレスポンスのリスト\n */\nconst resasPopulationToGraphData = (\n  prefNames: string[],\n  responses: ResasPopulationResponse[]\n) => {\n  // 各都道府県の総人口のデータを抽出\n  const totalData: Record<string, number>[][] = responses\n    .map((response) => response.result.data)\n    .map(\n      (datum) =>\n        datum.filter(\n          (datum: ResasPopulationData) => datum.label === \"総人口\"\n        )[0].data\n    );\n\n  // 「年」のリスト\n  const years = [\n    ...new Set(totalData.flatMap((data) => data.map((record) => record.year))),\n  ];\n  // 総人口データの配列をグラフ用のデータに変換\n  const graphData = years.map((year: number) => {\n    const record: Record<string, number> = { 年: year };\n    totalData.forEach((data, index) => {\n      const value = data.find((datum) => datum.year === year)?.value;\n      if (value === undefined) {\n        return;\n      }\n      record[prefNames[index]] = value;\n    });\n    return record;\n  });\n\n  return graphData;\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import(\"web-vitals\").then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}